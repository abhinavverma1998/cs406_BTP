/*typedef struct Box
{
	int  coords[DIMENSION*2]; //topleft and bottom right (x and y coordinates)
	std::vector<std::string> arguments;		
	template<typename T, typename... Args>

    Box(const T t, const Args&... args)
    {
        arguments.push_back(t);
        int dummy[] = { 0, (arguments.push_back(args), 0)...}; // all magic is here
        (void) dummy; // Avoid unused variable warning.

		for (int i=0; i < arguments.size(); i++) {
            coords[i] = arguments[i];
        }
    }
	// Box(int coord0...)
	// {
	// 	va_list argList;
	// 	coords[0]=coord0;
	// 	va_start(argList,coord0);
	// 	for(int argNum=1;argNum<2*DIMENSION;argNum++)
	// 		coords[argNum]=va_arg(argList,int);
	// 	va_end(argList);
	// }
	Box(){}
	void PrintStr(char *str)const
	{
		std::ostringstream ostrstrm;
		for(int i=0;i<2*DIMENSION;i++)
		{
			ostrstrm<<coords[i];
			if(i!= (2*DIMENSION-1))
				ostrstrm<<std::string(" ");
		}
		//cout<<ostrstrm.str();
		strcpy(str,ostrstrm.str().c_str());
		//sprintf(str,"%d %d %d %d",coords[0],coords[1],coords[2],coords[3],coords[4],coords[5],coords[6],coords[7]);
	}
	Box& operator=(const Box& rhs)
	{
		for(int i = 0;i<DIMENSION*2;i++)
			this->coords[i]=rhs.coords[i];
		return *this;
	}
	Box(const Box& rhs)
	{
		for(int i = 0;i<DIMENSION*2;i++)
			this->coords[i]=rhs.coords[i];
	}
	bool operator==(const Box& rhs)
	{
		bool flag = true;
		for(int i = 0;i<DIMENSION*2;i++)
		{
			if(this->coords[i]!=rhs.coords[i])
			{
				flag = false;
				break;
			}
		}
		return flag;
	}
	long int GetBoxSize()
	{
		long int len = 1;
		for(int i=0;i<DIMENSION;i++)
		{
			len *= (coords[i+DIMENSION]-coords[i]+1);
		}
		return len;
	}
}Box;*/